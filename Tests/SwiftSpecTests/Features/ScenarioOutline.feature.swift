//
// AUTOGENERATED FILE
// This code was generated by SwiftSpec
//
// Changes to this file may cause
// incorrect behaviour and will be lost
// if the file is regenerated.
//

import XCTest
import SwiftSpec

class ScenarioOutlineTests : XCTestCase {
var testRunner:TestRunner!
var scenarioContext:ScenarioContext!

override func setUp() {
super.setUp()
scenarioContext = ScenarioContextImplementation()
scenarioContext.featureTags = []
testRunner = TestRunner(scenarioContext: scenarioContext)
}

override func tearDown() {
testRunner = nil
scenarioContext = nil
super.tearDown()
}

func testTheSumOfTwoNumbers_0() {
do {
try testRunner.executeStep(.when, "adding '1' and '1'")
try testRunner.executeStep(.then, "the result should be '2'")
} catch {
XCTFail("\(error)")
}
}
func testTheSumOfTwoNumbers_1() {
do {
try testRunner.executeStep(.when, "adding '10' and '20'")
try testRunner.executeStep(.then, "the result should be '30'")
} catch {
XCTFail("\(error)")
}
}
func testTheSumOfTwoNumbers_2() {
do {
try testRunner.executeStep(.when, "adding '42' and '17'")
try testRunner.executeStep(.then, "the result should be '59'")
} catch {
XCTFail("\(error)")
}
}
func testMathUsingReversePolishNotation_Addition_0() {
do {
try testRunner.executeStep(.given, "that operand '1' has been entered")
try testRunner.executeStep(.and, "that operand '1' has been entered")
try testRunner.executeStep(.when, "entering operator 'add'")
try testRunner.executeStep(.then, "the result should be '2'")
} catch {
XCTFail("\(error)")
}
}
func testMathUsingReversePolishNotation_Addition_1() {
do {
try testRunner.executeStep(.given, "that operand '10' has been entered")
try testRunner.executeStep(.and, "that operand '20' has been entered")
try testRunner.executeStep(.when, "entering operator 'add'")
try testRunner.executeStep(.then, "the result should be '30'")
} catch {
XCTFail("\(error)")
}
}
func testMathUsingReversePolishNotation_Subtraction_0() {
do {
try testRunner.executeStep(.given, "that operand '1' has been entered")
try testRunner.executeStep(.and, "that operand '1' has been entered")
try testRunner.executeStep(.when, "entering operator 'subtract'")
try testRunner.executeStep(.then, "the result should be '0'")
} catch {
XCTFail("\(error)")
}
}
func testMathUsingReversePolishNotation_Subtraction_1() {
do {
try testRunner.executeStep(.given, "that operand '10' has been entered")
try testRunner.executeStep(.and, "that operand '20' has been entered")
try testRunner.executeStep(.when, "entering operator 'subtract'")
try testRunner.executeStep(.then, "the result should be '-10'")
} catch {
XCTFail("\(error)")
}
}
func testAddingANumberToItself_0() {
do {
try testRunner.executeStep(.when, "adding '1' and '1'")
try testRunner.executeStep(.then, "the result should be '2'")
} catch {
XCTFail("\(error)")
}
}
func testAddingANumberToItself_1() {
do {
try testRunner.executeStep(.when, "adding '42' and '42'")
try testRunner.executeStep(.then, "the result should be '84'")
} catch {
XCTFail("\(error)")
}
}
}